What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository creates a local git repository under the folder you
	are currently in. It is the first step that is needed before you can start
	committing file/code changes.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The working directory contains ALL the files whereas the repository contains
	only the committed files. The staging area acts as a temporary repository of 
	all the files that will be included in a commit.

How can you use the staging area to make sure you have one commit per logical
change?

	Add all the files that constitute the change to the staging area and then
	commit them in one commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	For trying out new features or experimenting with a change that may not be
	added to the main branch. Branches allow you to keep a track of the changes
	separately from the master branch and then merge them with the master at a
	later point in time if needed.

How do the diagrams help you visualize the branch structure?

	The diagrams provides a good idea about the paths taken by each branch and
	the commits that will be a part of each branch. The code that will be
	"unreachable" can also be easily visualized in the diagrams.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches combines the code from both the branches into the
	target branch which is usually the master. It contains references to both
	the branches as it's parent branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	Pros : Saves time. More accurate for large amount of changes.
	Cons : May result in code that may not be a logical unit and may not work.